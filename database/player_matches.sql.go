// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player_matches.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkIfMatchIDExistsInPlayerMatches = `-- name: CheckIfMatchIDExistsInPlayerMatches :one
SELECT EXISTS (SELECT 1
FROM player_matches
WHERE match_id = $1
LIMIT 1)
`

func (q *Queries) CheckIfMatchIDExistsInPlayerMatches(ctx context.Context, matchID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfMatchIDExistsInPlayerMatches, matchID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkIfMatchUrlExistsInPlayerMatches = `-- name: CheckIfMatchUrlExistsInPlayerMatches :one
SELECT EXISTS (SELECT 1
FROM player_matches
WHERE match_url = $1
LIMIT 1)
`

func (q *Queries) CheckIfMatchUrlExistsInPlayerMatches(ctx context.Context, matchUrl string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfMatchUrlExistsInPlayerMatches, matchUrl)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkIfPlayerMatchExistsByIds = `-- name: CheckIfPlayerMatchExistsByIds :one
SELECT EXISTS (SELECT 1
FROM player_matches
WHERE match_id = $1 and player_id = $2
LIMIT 1)
`

type CheckIfPlayerMatchExistsByIdsParams struct {
	MatchID  uuid.UUID
	PlayerID uuid.UUID
}

func (q *Queries) CheckIfPlayerMatchExistsByIds(ctx context.Context, arg CheckIfPlayerMatchExistsByIdsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfPlayerMatchExistsByIds, arg.MatchID, arg.PlayerID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createPlayerMatch = `-- name: CreatePlayerMatch :one
INSERT INTO player_matches (
    match_id,
    player_id,
    match_url,
    first_minute,
    last_minute,
    goals,
    penalties,
    yellow_card,
    red_card,
    own_goals,
    is_knockout,
    at_home
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12
)
RETURNING match_id, player_id, match_url, first_minute, last_minute, goals, penalties, yellow_card, red_card, own_goals, is_knockout, at_home
`

type CreatePlayerMatchParams struct {
	MatchID     uuid.UUID
	PlayerID    uuid.UUID
	MatchUrl    string
	FirstMinute int32
	LastMinute  int32
	Goals       int32
	Penalties   int32
	YellowCard  int32
	RedCard     int32
	OwnGoals    int32
	IsKnockout  bool
	AtHome      bool
}

func (q *Queries) CreatePlayerMatch(ctx context.Context, arg CreatePlayerMatchParams) (PlayerMatch, error) {
	row := q.db.QueryRowContext(ctx, createPlayerMatch,
		arg.MatchID,
		arg.PlayerID,
		arg.MatchUrl,
		arg.FirstMinute,
		arg.LastMinute,
		arg.Goals,
		arg.Penalties,
		arg.YellowCard,
		arg.RedCard,
		arg.OwnGoals,
		arg.IsKnockout,
		arg.AtHome,
	)
	var i PlayerMatch
	err := row.Scan(
		&i.MatchID,
		&i.PlayerID,
		&i.MatchUrl,
		&i.FirstMinute,
		&i.LastMinute,
		&i.Goals,
		&i.Penalties,
		&i.YellowCard,
		&i.RedCard,
		&i.OwnGoals,
		&i.IsKnockout,
		&i.AtHome,
	)
	return i, err
}

const deletePlayerMatches = `-- name: DeletePlayerMatches :exec
DELETE FROM player_matches
`

func (q *Queries) DeletePlayerMatches(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deletePlayerMatches)
	return err
}

const deleteRecordsForGivenMatchUrl = `-- name: DeleteRecordsForGivenMatchUrl :exec
DELETE FROM player_matches
WHERE player_matches.match_url = $1
`

func (q *Queries) DeleteRecordsForGivenMatchUrl(ctx context.Context, matchUrl string) error {
	_, err := q.db.ExecContext(ctx, deleteRecordsForGivenMatchUrl, matchUrl)
	return err
}

const getPlayerMatchFromIds = `-- name: GetPlayerMatchFromIds :one
SELECT match_id, player_id, match_url, first_minute, last_minute, goals, penalties, yellow_card, red_card, own_goals, is_knockout, at_home
FROM player_matches
WHERE match_id = $1 and player_id = $2
`

type GetPlayerMatchFromIdsParams struct {
	MatchID  uuid.UUID
	PlayerID uuid.UUID
}

func (q *Queries) GetPlayerMatchFromIds(ctx context.Context, arg GetPlayerMatchFromIdsParams) (PlayerMatch, error) {
	row := q.db.QueryRowContext(ctx, getPlayerMatchFromIds, arg.MatchID, arg.PlayerID)
	var i PlayerMatch
	err := row.Scan(
		&i.MatchID,
		&i.PlayerID,
		&i.MatchUrl,
		&i.FirstMinute,
		&i.LastMinute,
		&i.Goals,
		&i.Penalties,
		&i.YellowCard,
		&i.RedCard,
		&i.OwnGoals,
		&i.IsKnockout,
		&i.AtHome,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: knockout_matches.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createKnockoutMatch = `-- name: CreateKnockoutMatch :one
INSERT INTO knockout_matches (id, competition_id, home_team_id, away_team_id,
home_goals, away_goals, date, kick_off_time, referee_id, venue_id, attendance, 
home_xg, away_xg, went_to_pens, home_pens, away_pens, round, weekday, url, home_team_online_id, away_team_online_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21
)
RETURNING id, competition_id, home_team_id, away_team_id, home_goals, away_goals, date, kick_off_time, referee_id, venue_id, attendance, home_xg, away_xg, went_to_pens, home_pens, away_pens, round, weekday, url, home_team_online_id, away_team_online_id
`

type CreateKnockoutMatchParams struct {
	ID               uuid.UUID
	CompetitionID    uuid.UUID
	HomeTeamID       uuid.UUID
	AwayTeamID       uuid.UUID
	HomeGoals        int32
	AwayGoals        int32
	Date             time.Time
	KickOffTime      sql.NullTime
	RefereeID        uuid.NullUUID
	VenueID          uuid.NullUUID
	Attendance       sql.NullInt32
	HomeXg           sql.NullFloat64
	AwayXg           sql.NullFloat64
	WentToPens       bool
	HomePens         sql.NullInt32
	AwayPens         sql.NullInt32
	Round            string
	Weekday          string
	Url              string
	HomeTeamOnlineID string
	AwayTeamOnlineID string
}

func (q *Queries) CreateKnockoutMatch(ctx context.Context, arg CreateKnockoutMatchParams) (KnockoutMatch, error) {
	row := q.db.QueryRowContext(ctx, createKnockoutMatch,
		arg.ID,
		arg.CompetitionID,
		arg.HomeTeamID,
		arg.AwayTeamID,
		arg.HomeGoals,
		arg.AwayGoals,
		arg.Date,
		arg.KickOffTime,
		arg.RefereeID,
		arg.VenueID,
		arg.Attendance,
		arg.HomeXg,
		arg.AwayXg,
		arg.WentToPens,
		arg.HomePens,
		arg.AwayPens,
		arg.Round,
		arg.Weekday,
		arg.Url,
		arg.HomeTeamOnlineID,
		arg.AwayTeamOnlineID,
	)
	var i KnockoutMatch
	err := row.Scan(
		&i.ID,
		&i.CompetitionID,
		&i.HomeTeamID,
		&i.AwayTeamID,
		&i.HomeGoals,
		&i.AwayGoals,
		&i.Date,
		&i.KickOffTime,
		&i.RefereeID,
		&i.VenueID,
		&i.Attendance,
		&i.HomeXg,
		&i.AwayXg,
		&i.WentToPens,
		&i.HomePens,
		&i.AwayPens,
		&i.Round,
		&i.Weekday,
		&i.Url,
		&i.HomeTeamOnlineID,
		&i.AwayTeamOnlineID,
	)
	return i, err
}

const deleteKnockoutMatches = `-- name: DeleteKnockoutMatches :exec
DELETE FROM knockout_matches
`

func (q *Queries) DeleteKnockoutMatches(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteKnockoutMatches)
	return err
}

const getAllMatchesFromComp = `-- name: GetAllMatchesFromComp :many
SELECT knockout_matches.id, competition_id, home_team_id, away_team_id, home_goals, away_goals, date, kick_off_time, referee_id, venue_id, attendance, home_xg, away_xg, went_to_pens, home_pens, away_pens, round, weekday, knockout_matches.url, home_team_online_id, away_team_online_id, competitions.id, name, season, competitions.url FROM knockout_matches
INNER JOIN competitions on competitions.id = knockout_matches.competition_id
WHERE competitions.name = $1 AND competitions.season = $2 AND round = $3
`

type GetAllMatchesFromCompParams struct {
	Name   string
	Season string
	Round  string
}

type GetAllMatchesFromCompRow struct {
	ID               uuid.UUID
	CompetitionID    uuid.UUID
	HomeTeamID       uuid.UUID
	AwayTeamID       uuid.UUID
	HomeGoals        int32
	AwayGoals        int32
	Date             time.Time
	KickOffTime      sql.NullTime
	RefereeID        uuid.NullUUID
	VenueID          uuid.NullUUID
	Attendance       sql.NullInt32
	HomeXg           sql.NullFloat64
	AwayXg           sql.NullFloat64
	WentToPens       bool
	HomePens         sql.NullInt32
	AwayPens         sql.NullInt32
	Round            string
	Weekday          string
	Url              string
	HomeTeamOnlineID string
	AwayTeamOnlineID string
	ID_2             uuid.UUID
	Name             string
	Season           string
	Url_2            string
}

func (q *Queries) GetAllMatchesFromComp(ctx context.Context, arg GetAllMatchesFromCompParams) ([]GetAllMatchesFromCompRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllMatchesFromComp, arg.Name, arg.Season, arg.Round)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMatchesFromCompRow
	for rows.Next() {
		var i GetAllMatchesFromCompRow
		if err := rows.Scan(
			&i.ID,
			&i.CompetitionID,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.HomeGoals,
			&i.AwayGoals,
			&i.Date,
			&i.KickOffTime,
			&i.RefereeID,
			&i.VenueID,
			&i.Attendance,
			&i.HomeXg,
			&i.AwayXg,
			&i.WentToPens,
			&i.HomePens,
			&i.AwayPens,
			&i.Round,
			&i.Weekday,
			&i.Url,
			&i.HomeTeamOnlineID,
			&i.AwayTeamOnlineID,
			&i.ID_2,
			&i.Name,
			&i.Season,
			&i.Url_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnockoutGamesByRoundAndSeason = `-- name: GetKnockoutGamesByRoundAndSeason :many
SELECT
    M.home_goals AS home_goals,
    M.away_goals AS away_goals,
    M.went_to_pens AS went_to_pens,
    M.home_pens AS home_pens,
    M.away_pens AS away_pens,
    M.date AS date,
    M.kick_off_time AS kick_off_time,
    M.attendance AS attendance,
    venues.name AS stadium,
    referees.name AS referee,
    HT.name AS home_team,
    AT.name AS away_team
FROM knockout_matches as M
INNER JOIN teams as HT on HT.id = M.home_team_id
INNER JOIN teams as AT on AT.id = M.away_team_id
INNER JOIN venues on M.venue_id = venues.id
INNER JOIN referees on M.referee_id = referees.id
INNER JOIN competitions ON M.competition_id = competitions.id
WHERE round = $1 AND competitions.name = $2 AND competitions.season = $3
`

type GetKnockoutGamesByRoundAndSeasonParams struct {
	Round  string
	Name   string
	Season string
}

type GetKnockoutGamesByRoundAndSeasonRow struct {
	HomeGoals   int32
	AwayGoals   int32
	WentToPens  bool
	HomePens    sql.NullInt32
	AwayPens    sql.NullInt32
	Date        time.Time
	KickOffTime sql.NullTime
	Attendance  sql.NullInt32
	Stadium     string
	Referee     string
	HomeTeam    string
	AwayTeam    string
}

func (q *Queries) GetKnockoutGamesByRoundAndSeason(ctx context.Context, arg GetKnockoutGamesByRoundAndSeasonParams) ([]GetKnockoutGamesByRoundAndSeasonRow, error) {
	rows, err := q.db.QueryContext(ctx, getKnockoutGamesByRoundAndSeason, arg.Round, arg.Name, arg.Season)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKnockoutGamesByRoundAndSeasonRow
	for rows.Next() {
		var i GetKnockoutGamesByRoundAndSeasonRow
		if err := rows.Scan(
			&i.HomeGoals,
			&i.AwayGoals,
			&i.WentToPens,
			&i.HomePens,
			&i.AwayPens,
			&i.Date,
			&i.KickOffTime,
			&i.Attendance,
			&i.Stadium,
			&i.Referee,
			&i.HomeTeam,
			&i.AwayTeam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnockoutGamesByTeamAndSeason = `-- name: GetKnockoutGamesByTeamAndSeason :many
SELECT 
HT.name as home_team, 
AT.name as away_team, 
M.home_goals as home_goals, 
M.away_goals as away_goals,
M.date as date,
venues.name as stadium
FROM knockout_matches as M
INNER JOIN teams as HT on HT.id = M.home_team_id
INNER JOIN teams as AT on AT.id = M.away_team_id
INNER JOIN competitions on competitions.id = M.competition_id
INNER JOIN venues on M.venue_id = venues.id
WHERE (HT.name = $1 OR AT.name = $1) AND competitions.name = $2 AND competitions.season = $3
`

type GetKnockoutGamesByTeamAndSeasonParams struct {
	Name   string
	Name_2 string
	Season string
}

type GetKnockoutGamesByTeamAndSeasonRow struct {
	HomeTeam  string
	AwayTeam  string
	HomeGoals int32
	AwayGoals int32
	Date      time.Time
	Stadium   string
}

func (q *Queries) GetKnockoutGamesByTeamAndSeason(ctx context.Context, arg GetKnockoutGamesByTeamAndSeasonParams) ([]GetKnockoutGamesByTeamAndSeasonRow, error) {
	rows, err := q.db.QueryContext(ctx, getKnockoutGamesByTeamAndSeason, arg.Name, arg.Name_2, arg.Season)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKnockoutGamesByTeamAndSeasonRow
	for rows.Next() {
		var i GetKnockoutGamesByTeamAndSeasonRow
		if err := rows.Scan(
			&i.HomeTeam,
			&i.AwayTeam,
			&i.HomeGoals,
			&i.AwayGoals,
			&i.Date,
			&i.Stadium,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnockoutMatchIDFromUrl = `-- name: GetKnockoutMatchIDFromUrl :one
SELECT id
FROM knockout_matches
WHERE url = $1
`

func (q *Queries) GetKnockoutMatchIDFromUrl(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getKnockoutMatchIDFromUrl, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getKnockoutMatchUrls = `-- name: GetKnockoutMatchUrls :many
SELECT url
FROM knockout_matches
`

func (q *Queries) GetKnockoutMatchUrls(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getKnockoutMatchUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var url string
		if err := rows.Scan(&url); err != nil {
			return nil, err
		}
		items = append(items, url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnockoutMatchUrlsAndTeamOnlineIds = `-- name: GetKnockoutMatchUrlsAndTeamOnlineIds :many
SELECT url, home_team_online_id, away_team_online_id
FROM knockout_matches
`

type GetKnockoutMatchUrlsAndTeamOnlineIdsRow struct {
	Url              string
	HomeTeamOnlineID string
	AwayTeamOnlineID string
}

func (q *Queries) GetKnockoutMatchUrlsAndTeamOnlineIds(ctx context.Context) ([]GetKnockoutMatchUrlsAndTeamOnlineIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, getKnockoutMatchUrlsAndTeamOnlineIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKnockoutMatchUrlsAndTeamOnlineIdsRow
	for rows.Next() {
		var i GetKnockoutMatchUrlsAndTeamOnlineIdsRow
		if err := rows.Scan(&i.Url, &i.HomeTeamOnlineID, &i.AwayTeamOnlineID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnockoutMatchUrlsAndTeamOnlineIdsWOffset = `-- name: GetKnockoutMatchUrlsAndTeamOnlineIdsWOffset :many
SELECT url, home_team_online_id, away_team_online_id
FROM knockout_matches
ORDER BY url
LIMIT 1000
OFFSET $1
`

type GetKnockoutMatchUrlsAndTeamOnlineIdsWOffsetRow struct {
	Url              string
	HomeTeamOnlineID string
	AwayTeamOnlineID string
}

func (q *Queries) GetKnockoutMatchUrlsAndTeamOnlineIdsWOffset(ctx context.Context, offset int32) ([]GetKnockoutMatchUrlsAndTeamOnlineIdsWOffsetRow, error) {
	rows, err := q.db.QueryContext(ctx, getKnockoutMatchUrlsAndTeamOnlineIdsWOffset, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKnockoutMatchUrlsAndTeamOnlineIdsWOffsetRow
	for rows.Next() {
		var i GetKnockoutMatchUrlsAndTeamOnlineIdsWOffsetRow
		if err := rows.Scan(&i.Url, &i.HomeTeamOnlineID, &i.AwayTeamOnlineID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnockoutMatches = `-- name: GetKnockoutMatches :many
SELECT id, competition_id, home_team_id, away_team_id, home_goals, away_goals, date, kick_off_time, referee_id, venue_id, attendance, home_xg, away_xg, went_to_pens, home_pens, away_pens, round, weekday, url, home_team_online_id, away_team_online_id FROM knockout_matches
`

func (q *Queries) GetKnockoutMatches(ctx context.Context) ([]KnockoutMatch, error) {
	rows, err := q.db.QueryContext(ctx, getKnockoutMatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KnockoutMatch
	for rows.Next() {
		var i KnockoutMatch
		if err := rows.Scan(
			&i.ID,
			&i.CompetitionID,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.HomeGoals,
			&i.AwayGoals,
			&i.Date,
			&i.KickOffTime,
			&i.RefereeID,
			&i.VenueID,
			&i.Attendance,
			&i.HomeXg,
			&i.AwayXg,
			&i.WentToPens,
			&i.HomePens,
			&i.AwayPens,
			&i.Round,
			&i.Weekday,
			&i.Url,
			&i.HomeTeamOnlineID,
			&i.AwayTeamOnlineID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnockoutMatchesByClub = `-- name: GetKnockoutMatchesByClub :many
SELECT id, competition_id, home_team_id, away_team_id, home_goals, away_goals, date, kick_off_time, referee_id, venue_id, attendance, home_xg, away_xg, went_to_pens, home_pens, away_pens, round, weekday, url, home_team_online_id, away_team_online_id FROM knockout_matches
WHERE home_team_id = $1 or away_team_id = $1
`

func (q *Queries) GetKnockoutMatchesByClub(ctx context.Context, homeTeamID uuid.UUID) ([]KnockoutMatch, error) {
	rows, err := q.db.QueryContext(ctx, getKnockoutMatchesByClub, homeTeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KnockoutMatch
	for rows.Next() {
		var i KnockoutMatch
		if err := rows.Scan(
			&i.ID,
			&i.CompetitionID,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.HomeGoals,
			&i.AwayGoals,
			&i.Date,
			&i.KickOffTime,
			&i.RefereeID,
			&i.VenueID,
			&i.Attendance,
			&i.HomeXg,
			&i.AwayXg,
			&i.WentToPens,
			&i.HomePens,
			&i.AwayPens,
			&i.Round,
			&i.Weekday,
			&i.Url,
			&i.HomeTeamOnlineID,
			&i.AwayTeamOnlineID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMatchesInEachRoundForGivenComp = `-- name: GetMatchesInEachRoundForGivenComp :many
SELECT 
    round,
    COUNT(*) AS no_of_games
FROM knockout_matches
INNER JOIN competitions ON knockout_matches.competition_id = competitions.id
WHERE competitions.name = $1 AND competitions.season = $2
GROUP BY round
ORDER BY no_of_games
`

type GetMatchesInEachRoundForGivenCompParams struct {
	Name   string
	Season string
}

type GetMatchesInEachRoundForGivenCompRow struct {
	Round     string
	NoOfGames int64
}

func (q *Queries) GetMatchesInEachRoundForGivenComp(ctx context.Context, arg GetMatchesInEachRoundForGivenCompParams) ([]GetMatchesInEachRoundForGivenCompRow, error) {
	rows, err := q.db.QueryContext(ctx, getMatchesInEachRoundForGivenComp, arg.Name, arg.Season)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMatchesInEachRoundForGivenCompRow
	for rows.Next() {
		var i GetMatchesInEachRoundForGivenCompRow
		if err := rows.Scan(&i.Round, &i.NoOfGames); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

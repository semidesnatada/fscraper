// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: referees.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkIfRefereeExistsById = `-- name: CheckIfRefereeExistsById :one
SELECT EXISTS (SELECT 1
FROM referees
WHERE id = $1
LIMIT 1)
`

func (q *Queries) CheckIfRefereeExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfRefereeExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkIfRefereeExistsByName = `-- name: CheckIfRefereeExistsByName :one
SELECT EXISTS (SELECT 1
FROM referees
WHERE name = $1
LIMIT 1)
`

func (q *Queries) CheckIfRefereeExistsByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfRefereeExistsByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createReferee = `-- name: CreateReferee :one
INSERT INTO referees (id, name)
VALUES (
    $1,
    $2
)
RETURNING id, name
`

type CreateRefereeParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateReferee(ctx context.Context, arg CreateRefereeParams) (Referee, error) {
	row := q.db.QueryRowContext(ctx, createReferee, arg.ID, arg.Name)
	var i Referee
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteReferees = `-- name: DeleteReferees :exec
DELETE FROM referees
`

func (q *Queries) DeleteReferees(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteReferees)
	return err
}

const getRefereeIdFromName = `-- name: GetRefereeIdFromName :one
SELECT id
FROM referees
WHERE name = $1
`

func (q *Queries) GetRefereeIdFromName(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getRefereeIdFromName, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRefereeNameFromId = `-- name: GetRefereeNameFromId :one
SELECT name
FROM referees
WHERE id = $1
`

func (q *Queries) GetRefereeNameFromId(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getRefereeNameFromId, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: venues.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkIfVenueExistsById = `-- name: CheckIfVenueExistsById :one
SELECT EXISTS (SELECT 1
FROM venues
WHERE id = $1
LIMIT 1)
`

func (q *Queries) CheckIfVenueExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfVenueExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkIfVenueExistsByName = `-- name: CheckIfVenueExistsByName :one
SELECT EXISTS (SELECT 1
FROM venues
WHERE name = $1
LIMIT 1)
`

func (q *Queries) CheckIfVenueExistsByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfVenueExistsByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createVenue = `-- name: CreateVenue :one
INSERT INTO venues (id, name)
VALUES (
    $1,
    $2
)
RETURNING id, name
`

type CreateVenueParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateVenue(ctx context.Context, arg CreateVenueParams) (Venue, error) {
	row := q.db.QueryRowContext(ctx, createVenue, arg.ID, arg.Name)
	var i Venue
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteVenues = `-- name: DeleteVenues :exec
DELETE FROM venues
`

func (q *Queries) DeleteVenues(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteVenues)
	return err
}

const getVenueIdFromName = `-- name: GetVenueIdFromName :one
SELECT id
FROM venues
WHERE name = $1
`

func (q *Queries) GetVenueIdFromName(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getVenueIdFromName, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getVenueNameFromId = `-- name: GetVenueNameFromId :one
SELECT name
FROM venues
WHERE id = $1
`

func (q *Queries) GetVenueNameFromId(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getVenueNameFromId, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

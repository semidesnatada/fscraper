// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: competitions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkIfCompetitionExistsById = `-- name: CheckIfCompetitionExistsById :one
SELECT EXISTS (SELECT 1
FROM competitions
WHERE id = $1
LIMIT 1)
`

func (q *Queries) CheckIfCompetitionExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfCompetitionExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkIfCompetitionExistsByNameAndSeason = `-- name: CheckIfCompetitionExistsByNameAndSeason :one
SELECT EXISTS (SELECT 1
FROM competitions
WHERE name = $1 AND season = $2
LIMIT 1)
`

type CheckIfCompetitionExistsByNameAndSeasonParams struct {
	Name   string
	Season string
}

func (q *Queries) CheckIfCompetitionExistsByNameAndSeason(ctx context.Context, arg CheckIfCompetitionExistsByNameAndSeasonParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfCompetitionExistsByNameAndSeason, arg.Name, arg.Season)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCompetition = `-- name: CreateCompetition :one
INSERT INTO competitions (id, name, season, url)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, name, season, url
`

type CreateCompetitionParams struct {
	ID     uuid.UUID
	Name   string
	Season string
	Url    string
}

func (q *Queries) CreateCompetition(ctx context.Context, arg CreateCompetitionParams) (Competition, error) {
	row := q.db.QueryRowContext(ctx, createCompetition,
		arg.ID,
		arg.Name,
		arg.Season,
		arg.Url,
	)
	var i Competition
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Season,
		&i.Url,
	)
	return i, err
}

const deleteCompetitions = `-- name: DeleteCompetitions :exec
DELETE FROM competitions
`

func (q *Queries) DeleteCompetitions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCompetitions)
	return err
}

const getCompetitionIdFromNameAndSeason = `-- name: GetCompetitionIdFromNameAndSeason :one
SELECT id
FROM competitions
WHERE name = $1 AND season = $2
`

type GetCompetitionIdFromNameAndSeasonParams struct {
	Name   string
	Season string
}

func (q *Queries) GetCompetitionIdFromNameAndSeason(ctx context.Context, arg GetCompetitionIdFromNameAndSeasonParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCompetitionIdFromNameAndSeason, arg.Name, arg.Season)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getCompetitionNameAndSeasonFromId = `-- name: GetCompetitionNameAndSeasonFromId :one
SELECT name, season
FROM competitions
WHERE id = $1
`

type GetCompetitionNameAndSeasonFromIdRow struct {
	Name   string
	Season string
}

func (q *Queries) GetCompetitionNameAndSeasonFromId(ctx context.Context, id uuid.UUID) (GetCompetitionNameAndSeasonFromIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCompetitionNameAndSeasonFromId, id)
	var i GetCompetitionNameAndSeasonFromIdRow
	err := row.Scan(&i.Name, &i.Season)
	return i, err
}

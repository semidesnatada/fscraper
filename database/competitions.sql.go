// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: competitions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkIfCompetitionExistsById = `-- name: CheckIfCompetitionExistsById :one
SELECT EXISTS (SELECT 1
FROM competitions
WHERE id = $1
LIMIT 1)
`

func (q *Queries) CheckIfCompetitionExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfCompetitionExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkIfCompetitionExistsByName = `-- name: CheckIfCompetitionExistsByName :one
SELECT EXISTS (SELECT 1
FROM competitions
WHERE name = $1
LIMIT 1)
`

func (q *Queries) CheckIfCompetitionExistsByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfCompetitionExistsByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCompetition = `-- name: CreateCompetition :one
INSERT INTO competitions (id, name)
VALUES (
    $1,
    $2
)
RETURNING id, name
`

type CreateCompetitionParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateCompetition(ctx context.Context, arg CreateCompetitionParams) (Competition, error) {
	row := q.db.QueryRowContext(ctx, createCompetition, arg.ID, arg.Name)
	var i Competition
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteCompetitions = `-- name: DeleteCompetitions :exec
DELETE FROM competitions
`

func (q *Queries) DeleteCompetitions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCompetitions)
	return err
}

const getCompetitionIdFromName = `-- name: GetCompetitionIdFromName :one
SELECT id
FROM competitions
WHERE name = $1
`

func (q *Queries) GetCompetitionIdFromName(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCompetitionIdFromName, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getCompetitionNameFromId = `-- name: GetCompetitionNameFromId :one
SELECT name
FROM competitions
WHERE id = $1
`

func (q *Queries) GetCompetitionNameFromId(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getCompetitionNameFromId, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

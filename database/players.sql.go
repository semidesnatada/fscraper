// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: players.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkIfPlayerExistsById = `-- name: CheckIfPlayerExistsById :one
SELECT EXISTS (SELECT 1
FROM players
WHERE id = $1
LIMIT 1)
`

func (q *Queries) CheckIfPlayerExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfPlayerExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkIfPlayerExistsByUrl = `-- name: CheckIfPlayerExistsByUrl :one
SELECT EXISTS (SELECT 1
FROM players
WHERE url = $1
LIMIT 1)
`

func (q *Queries) CheckIfPlayerExistsByUrl(ctx context.Context, url string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfPlayerExistsByUrl, url)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (id, name, nationality, url)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, name, nationality, url
`

type CreatePlayerParams struct {
	ID          uuid.UUID
	Name        string
	Nationality string
	Url         string
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer,
		arg.ID,
		arg.Name,
		arg.Nationality,
		arg.Url,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nationality,
		&i.Url,
	)
	return i, err
}

const deletePlayers = `-- name: DeletePlayers :exec
DELETE FROM players
`

func (q *Queries) DeletePlayers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deletePlayers)
	return err
}

const getPlayerFromId = `-- name: GetPlayerFromId :one
SELECT id, name, nationality, url
FROM players
WHERE id = $1
`

func (q *Queries) GetPlayerFromId(ctx context.Context, id uuid.UUID) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerFromId, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nationality,
		&i.Url,
	)
	return i, err
}

const getPlayerIdFromUrl = `-- name: GetPlayerIdFromUrl :one
SELECT id
FROM players
WHERE url = $1
`

func (q *Queries) GetPlayerIdFromUrl(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getPlayerIdFromUrl, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPlayerIdsFromName = `-- name: GetPlayerIdsFromName :many
SELECT id
FROM players
WHERE name = $1
`

func (q *Queries) GetPlayerIdsFromName(ctx context.Context, name string) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getPlayerIdsFromName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerNameFromId = `-- name: GetPlayerNameFromId :one
SELECT name
FROM players
WHERE id = $1
`

func (q *Queries) GetPlayerNameFromId(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getPlayerNameFromId, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getPlayersByName = `-- name: GetPlayersByName :many
SELECT id, name, nationality, url FROM players
WHERE name = $1
`

func (q *Queries) GetPlayersByName(ctx context.Context, name string) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getPlayersByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Nationality,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

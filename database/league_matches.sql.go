// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: league_matches.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createLeagueMatch = `-- name: CreateLeagueMatch :one
INSERT INTO league_matches (id, competition_id, home_team_id, away_team_id,
home_goals, away_goals, date, kick_off_time, referee_id, venue_id, attendance,
home_xg, away_xg, weekday, url, home_team_online_id, away_team_online_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17
)
RETURNING id, competition_id, home_team_id, away_team_id, home_goals, away_goals, date, kick_off_time, referee_id, venue_id, attendance, home_xg, away_xg, weekday, url, home_team_online_id, away_team_online_id
`

type CreateLeagueMatchParams struct {
	ID               uuid.UUID
	CompetitionID    uuid.UUID
	HomeTeamID       uuid.UUID
	AwayTeamID       uuid.UUID
	HomeGoals        int32
	AwayGoals        int32
	Date             time.Time
	KickOffTime      sql.NullTime
	RefereeID        uuid.NullUUID
	VenueID          uuid.NullUUID
	Attendance       sql.NullInt32
	HomeXg           sql.NullFloat64
	AwayXg           sql.NullFloat64
	Weekday          string
	Url              string
	HomeTeamOnlineID string
	AwayTeamOnlineID string
}

func (q *Queries) CreateLeagueMatch(ctx context.Context, arg CreateLeagueMatchParams) (LeagueMatch, error) {
	row := q.db.QueryRowContext(ctx, createLeagueMatch,
		arg.ID,
		arg.CompetitionID,
		arg.HomeTeamID,
		arg.AwayTeamID,
		arg.HomeGoals,
		arg.AwayGoals,
		arg.Date,
		arg.KickOffTime,
		arg.RefereeID,
		arg.VenueID,
		arg.Attendance,
		arg.HomeXg,
		arg.AwayXg,
		arg.Weekday,
		arg.Url,
		arg.HomeTeamOnlineID,
		arg.AwayTeamOnlineID,
	)
	var i LeagueMatch
	err := row.Scan(
		&i.ID,
		&i.CompetitionID,
		&i.HomeTeamID,
		&i.AwayTeamID,
		&i.HomeGoals,
		&i.AwayGoals,
		&i.Date,
		&i.KickOffTime,
		&i.RefereeID,
		&i.VenueID,
		&i.Attendance,
		&i.HomeXg,
		&i.AwayXg,
		&i.Weekday,
		&i.Url,
		&i.HomeTeamOnlineID,
		&i.AwayTeamOnlineID,
	)
	return i, err
}

const deleteLeagueMatches = `-- name: DeleteLeagueMatches :exec
DELETE FROM league_matches
`

func (q *Queries) DeleteLeagueMatches(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteLeagueMatches)
	return err
}

const getLeagueGamesByTeamAndSeason = `-- name: GetLeagueGamesByTeamAndSeason :many
SELECT 
HT.name as home_team, 
AT.name as away_team, 
M.home_goals as home_goals, 
M.away_goals as away_goals,
M.date as date,
venues.name as stadium
FROM league_matches as M
INNER JOIN teams as HT on HT.id = M.home_team_id
INNER JOIN teams as AT on AT.id = M.away_team_id
INNER JOIN competitions on competitions.id = M.competition_id
INNER JOIN venues on M.venue_id = venues.id
WHERE (HT.name = $1 OR AT.name = $1) AND competitions.name = $2 AND competitions.season = $3
`

type GetLeagueGamesByTeamAndSeasonParams struct {
	Name   string
	Name_2 string
	Season string
}

type GetLeagueGamesByTeamAndSeasonRow struct {
	HomeTeam  string
	AwayTeam  string
	HomeGoals int32
	AwayGoals int32
	Date      time.Time
	Stadium   string
}

func (q *Queries) GetLeagueGamesByTeamAndSeason(ctx context.Context, arg GetLeagueGamesByTeamAndSeasonParams) ([]GetLeagueGamesByTeamAndSeasonRow, error) {
	rows, err := q.db.QueryContext(ctx, getLeagueGamesByTeamAndSeason, arg.Name, arg.Name_2, arg.Season)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeagueGamesByTeamAndSeasonRow
	for rows.Next() {
		var i GetLeagueGamesByTeamAndSeasonRow
		if err := rows.Scan(
			&i.HomeTeam,
			&i.AwayTeam,
			&i.HomeGoals,
			&i.AwayGoals,
			&i.Date,
			&i.Stadium,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeagueMatchIDFromUrl = `-- name: GetLeagueMatchIDFromUrl :one
SELECT id
FROM league_matches
WHERE url = $1
`

func (q *Queries) GetLeagueMatchIDFromUrl(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getLeagueMatchIDFromUrl, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getLeagueMatchUrls = `-- name: GetLeagueMatchUrls :many
SELECT url
FROM league_matches
`

func (q *Queries) GetLeagueMatchUrls(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getLeagueMatchUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var url string
		if err := rows.Scan(&url); err != nil {
			return nil, err
		}
		items = append(items, url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeagueMatchUrlsAndTeamOnlineIds = `-- name: GetLeagueMatchUrlsAndTeamOnlineIds :many
SELECT url, home_team_online_id, away_team_online_id
FROM league_matches
`

type GetLeagueMatchUrlsAndTeamOnlineIdsRow struct {
	Url              string
	HomeTeamOnlineID string
	AwayTeamOnlineID string
}

func (q *Queries) GetLeagueMatchUrlsAndTeamOnlineIds(ctx context.Context) ([]GetLeagueMatchUrlsAndTeamOnlineIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLeagueMatchUrlsAndTeamOnlineIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeagueMatchUrlsAndTeamOnlineIdsRow
	for rows.Next() {
		var i GetLeagueMatchUrlsAndTeamOnlineIdsRow
		if err := rows.Scan(&i.Url, &i.HomeTeamOnlineID, &i.AwayTeamOnlineID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeagueMatchUrlsAndTeamOnlineIdsWOffset = `-- name: GetLeagueMatchUrlsAndTeamOnlineIdsWOffset :many
SELECT url, home_team_online_id, away_team_online_id
FROM league_matches
ORDER BY url
LIMIT 1000
OFFSET $1
`

type GetLeagueMatchUrlsAndTeamOnlineIdsWOffsetRow struct {
	Url              string
	HomeTeamOnlineID string
	AwayTeamOnlineID string
}

func (q *Queries) GetLeagueMatchUrlsAndTeamOnlineIdsWOffset(ctx context.Context, offset int32) ([]GetLeagueMatchUrlsAndTeamOnlineIdsWOffsetRow, error) {
	rows, err := q.db.QueryContext(ctx, getLeagueMatchUrlsAndTeamOnlineIdsWOffset, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeagueMatchUrlsAndTeamOnlineIdsWOffsetRow
	for rows.Next() {
		var i GetLeagueMatchUrlsAndTeamOnlineIdsWOffsetRow
		if err := rows.Scan(&i.Url, &i.HomeTeamOnlineID, &i.AwayTeamOnlineID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeagueMatches = `-- name: GetLeagueMatches :many
SELECT id, competition_id, home_team_id, away_team_id, home_goals, away_goals, date, kick_off_time, referee_id, venue_id, attendance, home_xg, away_xg, weekday, url, home_team_online_id, away_team_online_id FROM league_matches
`

func (q *Queries) GetLeagueMatches(ctx context.Context) ([]LeagueMatch, error) {
	rows, err := q.db.QueryContext(ctx, getLeagueMatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LeagueMatch
	for rows.Next() {
		var i LeagueMatch
		if err := rows.Scan(
			&i.ID,
			&i.CompetitionID,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.HomeGoals,
			&i.AwayGoals,
			&i.Date,
			&i.KickOffTime,
			&i.RefereeID,
			&i.VenueID,
			&i.Attendance,
			&i.HomeXg,
			&i.AwayXg,
			&i.Weekday,
			&i.Url,
			&i.HomeTeamOnlineID,
			&i.AwayTeamOnlineID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeagueMatchesByClub = `-- name: GetLeagueMatchesByClub :many
SELECT id, competition_id, home_team_id, away_team_id, home_goals, away_goals, date, kick_off_time, referee_id, venue_id, attendance, home_xg, away_xg, weekday, url, home_team_online_id, away_team_online_id FROM league_matches
WHERE home_team_id = $1 or away_team_id = $1
`

func (q *Queries) GetLeagueMatchesByClub(ctx context.Context, homeTeamID uuid.UUID) ([]LeagueMatch, error) {
	rows, err := q.db.QueryContext(ctx, getLeagueMatchesByClub, homeTeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LeagueMatch
	for rows.Next() {
		var i LeagueMatch
		if err := rows.Scan(
			&i.ID,
			&i.CompetitionID,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.HomeGoals,
			&i.AwayGoals,
			&i.Date,
			&i.KickOffTime,
			&i.RefereeID,
			&i.VenueID,
			&i.Attendance,
			&i.HomeXg,
			&i.AwayXg,
			&i.Weekday,
			&i.Url,
			&i.HomeTeamOnlineID,
			&i.AwayTeamOnlineID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

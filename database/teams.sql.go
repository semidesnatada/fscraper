// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: teams.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkIfTeamExistsById = `-- name: CheckIfTeamExistsById :one
SELECT EXISTS (SELECT 1
FROM teams
WHERE id = $1
LIMIT 1)
`

func (q *Queries) CheckIfTeamExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfTeamExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkIfTeamExistsByName = `-- name: CheckIfTeamExistsByName :one
SELECT EXISTS (SELECT 1
FROM teams
WHERE name = $1
LIMIT 1)
`

func (q *Queries) CheckIfTeamExistsByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfTeamExistsByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (id, name)
VALUES (
    $1,
    $2
)
RETURNING id, name
`

type CreateTeamParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.ID, arg.Name)
	var i Team
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteTeams = `-- name: DeleteTeams :exec
DELETE FROM teams
`

func (q *Queries) DeleteTeams(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteTeams)
	return err
}

const getTeamIdFromName = `-- name: GetTeamIdFromName :one
SELECT id
FROM teams
WHERE name = $1
`

func (q *Queries) GetTeamIdFromName(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getTeamIdFromName, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getTeamNameFromId = `-- name: GetTeamNameFromId :one
SELECT name
FROM teams
WHERE id = $1
`

func (q *Queries) GetTeamNameFromId(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getTeamNameFromId, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

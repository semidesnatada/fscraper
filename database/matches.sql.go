// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: matches.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMatch = `-- name: CreateMatch :one
INSERT INTO matches (id, home_team, away_team, home_goals, away_goals)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, home_team, away_team, home_goals, away_goals
`

type CreateMatchParams struct {
	ID        uuid.UUID
	HomeTeam  string
	AwayTeam  string
	HomeGoals int32
	AwayGoals int32
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (Match, error) {
	row := q.db.QueryRowContext(ctx, createMatch,
		arg.ID,
		arg.HomeTeam,
		arg.AwayTeam,
		arg.HomeGoals,
		arg.AwayGoals,
	)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.HomeTeam,
		&i.AwayTeam,
		&i.HomeGoals,
		&i.AwayGoals,
	)
	return i, err
}

const getMatches = `-- name: GetMatches :many
SELECT id, home_team, away_team, home_goals, away_goals FROM matches
`

func (q *Queries) GetMatches(ctx context.Context) ([]Match, error) {
	rows, err := q.db.QueryContext(ctx, getMatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Match
	for rows.Next() {
		var i Match
		if err := rows.Scan(
			&i.ID,
			&i.HomeTeam,
			&i.AwayTeam,
			&i.HomeGoals,
			&i.AwayGoals,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
